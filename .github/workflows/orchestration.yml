name: Orchestrator

on:
  schedule:
    - cron: "*/5 * * * *"  # Runs every 5 minutes
  workflow_dispatch:  # Allows manual trigger
  push:
    branches:
      - "**"

jobs:
  orchestrate-simulation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Check Orchestration Flag from Config
        id: flag_check
        run: |
          ENABLED=$(jq -r '.enabled' config/orchestrator_config.json)
          echo "enabled=$ENABLED" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install Dependencies
        if: steps.flag_check.outputs.enabled == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Make Dropbox Script Executable
        if: steps.flag_check.outputs.enabled == 'true'
        run: chmod +x src/download_from_dropbox.sh

      - name: Download Files from Dropbox
        if: steps.flag_check.outputs.enabled == 'true'
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: src/download_from_dropbox.sh

      - name: Trigger Downstream Workflows via GitHub API
        if: steps.flag_check.outputs.enabled == 'true'
        env:
          GIT_PAT: ${{ secrets.GIT_PAT }}
        run: |
          INPUT_DIR="data/testing-input-output"
          TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")

          trigger_workflow() {
            REPO="$1"
            WORKFLOW_FILE="$2"
            echo "ðŸš€ Dispatching $WORKFLOW_FILE in $REPO"

            curl -X POST \
              -H "Authorization: token $GIT_PAT" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_FILE/dispatches \
              -d '{"ref":"main"}'
          }

          # Domain Grid Trigger
          if ls "$INPUT_DIR"/*.step &>/dev/null && [ -f "$INPUT_DIR/flow_data.json" ] && [ ! -f "$INPUT_DIR/enriched_metadata.json" ]; then
            trigger_workflow "Dmitrii-Zavalin-Deployments/engineering_simulations_pipeline_domain_grid_sred" "fluid_simulation_pipeline.yml"
          fi

          # Boundary Mapping Trigger
          if ls "$INPUT_DIR"/*.step &>/dev/null && [ -f "$INPUT_DIR/flow_data.json" ] && [ ! -f "$INPUT_DIR/boundary_conditions_gmsh.json" ]; then
            trigger_workflow "Dmitrii-Zavalin-Deployments/engineering_simulations_pipeline_boundary_mapping_sred" "boundary_conditions_workflow.yml"
          fi

          # Geometry Masking Trigger
          if ls "$INPUT_DIR"/*.step &>/dev/null && [ -f "$INPUT_DIR/flow_data.json" ] && [ ! -f "$INPUT_DIR/geometry_masking_gmsh.json" ]; then
            trigger_workflow "Dmitrii-Zavalin-Deployments/engineering_simulations_pipeline_geometry_masking_sred" "geometry_masking_workflow.yml"
          fi

          # Input Builder Trigger
          if [ -f "$INPUT_DIR/enriched_metadata.json" ] && \
             [ -f "$INPUT_DIR/boundary_conditions_gmsh.json" ] && \
             [ -f "$INPUT_DIR/geometry_masking_gmsh.json" ] && \
             [ ! -f "$INPUT_DIR/fluid_simulation_input.json" ]; then
            trigger_workflow "Dmitrii-Zavalin-Deployments/engineering_simulations_pipeline_input_builder_sred" "fluid_simulation_pipeline.yml"
          fi



