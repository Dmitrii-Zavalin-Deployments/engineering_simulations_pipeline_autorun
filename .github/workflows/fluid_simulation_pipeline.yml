name: Fluid Volumetric Data Processing and Commit

on:
  push:
    branches:
      - "**"  # Triggers on any branch push
  workflow_dispatch: # Allows manual trigger

jobs:
  process_fluid_volumetric_data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9" # Using 3.9 as it's common and stable for these libs

      - name: Upgrade pip and install dependencies
        run: |
          python -m pip install --upgrade pip
          # requirements.txt for this repo will contain numpy, scipy, pytest
          pip install -r requirements.txt
          pip install pytest # Keeping pytest separate for clarity if you only want runtime deps in requirements.txt

      - name: Debug Repository Structure
        run: ls -R "$GITHUB_WORKSPACE"

      - name: Verify Volumetric Data Processing Script Exists
        run: |
          echo "üîé Checking if generate_vdb_format.py exists..."
          ls -R "$GITHUB_WORKSPACE/src"
          if [ ! -f "$GITHUB_WORKSPACE/src/generate_vdb_format.py" ]; then
            echo "‚ùå Error: generate_vdb_format.py not found in src directory!"
            exit 1
          else
            echo "‚úÖ Script found: generate_vdb_format.py"
          fi

      - name: Run Fluid Volumetric Data Processing Script
        run: |
          # Execute the Python script directly. It will read the input JSONs and write the output JSON.
          python "$GITHUB_WORKSPACE/src/generate_vdb_format.py"

      - name: Debug Output Directory
        run: ls -R "$GITHUB_WORKSPACE/data/testing-input-output"

      # --- Test Steps (Adjust as per your actual tests for this repository) ---
      # Assuming tests for this repo focus on the data conversion logic.
      # - name: Run Unit Tests (Volumetric Data Processing)
      #   run: pytest tests/test_conversion_pipeline.py --verbose # Renamed from general mesh processing

      # --- Upload generated artifact (fluid_volume_data.json) ---
      # This is useful for debugging/downloading directly from GitHub Actions
      - name: Upload Generated Fluid Volume Data JSON
        uses: actions/upload-artifact@v4
        with:
          name: generated-fluid-volume-data-json
          path: ${{ github.workspace }}/data/testing-input-output/fluid_volume_data.json

      - name: Commit and Push Volumetric Data to Repository
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          git config --global user.name "${GIT_USER_NAME}"
          git config --global user.email "${GIT_USER_EMAIL}"

          cd "$GITHUB_WORKSPACE"

          GENERATED_FILE="data/testing-input-output/fluid_volume_data.json"
          
          if [ -f "$GENERATED_FILE" ]; then
            git add "$GENERATED_FILE"
            git status

            if [[ $(git diff --cached --quiet; echo $?) -ne 0 ]]; then
              git commit -m "Auto-update: Generated volumetric fluid data (JSON)"
              git push origin HEAD
            else
              echo "‚úÖ No changes to commit!"
            fi
          else
            echo "‚ùå No fluid volume data JSON detected, skipping commit."
          fi
