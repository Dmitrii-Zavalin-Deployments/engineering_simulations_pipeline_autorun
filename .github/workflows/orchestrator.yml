name: Orchestrator

on:
  schedule:
    - cron: "*/5 * * * *"  # Runs every 5 minutes
  workflow_dispatch:  # Allows manual trigger
  push:
    branches:
      - "**"

jobs:
  orchestrate-simulation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Check Orchestration Flag from Config
        id: flag_check
        run: |
          ENABLED=$(jq -r '.enabled' config/orchestrator_config.json)
          echo "enabled=$ENABLED" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install Dependencies
        if: steps.flag_check.outputs.enabled == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Make Dropbox Script Executable
        if: steps.flag_check.outputs.enabled == 'true'
        run: chmod +x src/download_from_dropbox.sh

      - name: Download Files from Dropbox
        if: steps.flag_check.outputs.enabled == 'true'
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: src/download_from_dropbox.sh

      - name: Inject SSH key into agent (no file write)
        if: steps.flag_check.outputs.enabled == 'true'
        run: |
          eval "$(ssh-agent -s)"
          echo "${{ secrets.DEPLOY_KEY }}" | ssh-add -
          ssh-keyscan github.com >> ~/.ssh/known_hosts
        env:
          SSH_AUTH_SOCK: /tmp/ssh-auth.sock

      - name: Configure Git Identity
        if: steps.flag_check.outputs.enabled == 'true'
        run: |
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Run Modular Orchestration
        if: steps.flag_check.outputs.enabled == 'true'
        env:
          SSH_AUTH_SOCK: /tmp/ssh-auth.sock
        run: |
          INPUT_DIR="data/testing-input-output"
          TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S.%3N")

          trigger_repo() {
            REPO_URL="$1"
            REPO_NAME=$(basename "$REPO_URL" .git)
            echo "🔁 Triggering: $REPO_NAME"

            git clone "$REPO_URL" || { echo "❌ Failed to clone $REPO_NAME"; return; }
            echo "$TIMESTAMP" >> "$REPO_NAME/trigger.txt"

            cd "$REPO_NAME" || return
            git add trigger.txt
            git commit -m "Triggered at $TIMESTAMP"
            git push || echo "❌ Push failed for $REPO_NAME"
            cd ..
            rm -rf "$REPO_NAME"
          }

          # Domain Grid Trigger
          if ls "$INPUT_DIR"/*.step &>/dev/null && [ -f "$INPUT_DIR/flow_data.json" ] && [ ! -f "$INPUT_DIR/enriched_metadata.json" ]; then
            trigger_repo "git@github.com:Dmitrii-Zavalin-Deployments/engineering_simulations_pipeline_domain_grid_sred.git"
          fi

          # Boundary Mapping Trigger
          if ls "$INPUT_DIR"/*.step &>/dev/null && [ -f "$INPUT_DIR/flow_data.json" ] && [ ! -f "$INPUT_DIR/boundary_conditions_gmsh.json" ]; then
            trigger_repo "git@github.com:Dmitrii-Zavalin-Deployments/engineering_simulations_pipeline_boundary_mapping_sred.git"
          fi

          # Geometry Masking Trigger
          if ls "$INPUT_DIR"/*.step &>/dev/null && [ -f "$INPUT_DIR/flow_data.json" ] && [ ! -f "$INPUT_DIR/geometry_masking_gmsh.json" ]; then
            trigger_repo "git@github.com:Dmitrii-Zavalin-Deployments/engineering_simulations_pipeline_geometry_masking_sred.git"
          fi

          # Input Builder Trigger
          if [ -f "$INPUT_DIR/enriched_metadata.json" ] && \
             [ -f "$INPUT_DIR/boundary_conditions_gmsh.json" ] && \
             [ -f "$INPUT_DIR/geometry_masking_gmsh.json" ] && \
             [ ! -f "$INPUT_DIR/fluid_simulation_input.json" ]; then
            trigger_repo "git@github.com:Dmitrii-Zavalin-Deployments/engineering_simulations_pipeline_input_builder_sred.git"
          fi



